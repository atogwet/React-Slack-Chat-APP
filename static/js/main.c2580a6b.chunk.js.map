{"version":3,"sources":["component/ColorPanel/ColorPanel.js","component/MetaPanel/MetaPanel.js","firebase.js","component/SidePanel/UserPanel.js","actions/types.js","actions/index.js","component/SidePanel/Channels.js","component/SidePanel/DirectMessages.js","component/SidePanel/SidePanel.js","component/Messages/MessagesHeader.js","component/Messages/MessagesForm.js","component/Messages/Message.js","component/Messages/Messages.js","component/App.js","reportWebVitals.js","component/Auth/Register.js","component/Auth/Login.js","Spinner.js","reducers/index.js","index.js"],"names":["ColorPanel","React","Component","MetaPanel","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","UserPanel","state","user","props","currentUser","modal","previewImage","croppedImage","blob","openModal","setState","closeModal","dropDownOptions","key","text","displayName","disabled","onClick","handleSignout","auth","signOut","then","console","log","handleChange","event","file","target","files","reader","FileReader","readAsDataURL","addEventListener","result","handleCropImage","avatarEditor","getImageScaledToCanvas","toBlob","imageUrl","URL","createObjectURL","this","Grid","style","background","Column","Row","padding","margin","Header","inverted","floated","as","Icon","name","color","size","Content","Dropdown","trigger","Image","src","photoURL","spaced","avatar","width","height","options","Modal","basic","open","onClose","Input","fluid","type","label","centered","stackable","columns","className","ref","node","image","border","scale","Actions","Button","SET_USER","CLEAR_USER","SET_CURRENT_CHANNEL","SET_PRIVATE_CHANNEL","setCurrentChannel","channel","actionTypes","payload","currentChannel","setPrivateChannel","isPrivateChannel","Channels","messagesRef","database","activeChannel","channels","notifications","channelName","channelDetails","channelsRef","firstLoad","addListeners","loadedChannels","on","snap","push","val","setFirstChannel","addNotificationListener","channelId","child","handleNotifications","id","currentChannelId","lastTotal","index","findIndex","notification","total","numChildren","count","lastKnownTotal","firstChannel","length","setActiveChannel","value","addChannel","newChannel","details","createdBy","update","catch","err","error","handleSumbit","preventDefault","isFormValid","changeChannel","clearNotifications","updatedNotifications","getNotificationsCount","forEach","displayChannels","map","Menu","Item","opacity","active","Label","Fragment","link","Form","onSubmit","Field","onChange","connect","DirectMessages","users","usersRef","connectedRef","presenceRef","currentUserUid","loadedUsers","set","onDisconnect","remove","addStatusToUser","userId","connected","updatedUsers","reduce","acc","uid","concat","isUserOnline","status","channelData","getChannelId","currentUserId","fontStyle","SidePanel","vertical","fixed","fontSize","MessagesHeader","numUniqueUsers","Segment","clearing","marginBottom","Subheader","MessagesForm","storageRef","storage","uploadTask","uploadState","percentUploaded","message","loading","errors","emojiPicker","handleAddEmoji","emoji","oldMessage","newMessage","colonToUnicode","colons","setTimeout","messageInputRef","focus","replace","x","emojiIndex","emojis","unicode","native","handleTogglePicker","createMessage","fileUrl","timestamp","ServerValue","TIMESTAMP","random","randomstring","generate","charset","uploadFile","metadata","filePath","put","Math","round","bytesTransferred","totalBytes","snapshot","getDownloadURL","downloadUrl","sendFileMessage","pathToUpload","sendMessage","getMessagesRef","onSelect","title","icon","content","labelPosition","placeholder","some","includes","Group","widths","isOwnMessage","isImage","hasOwnProperty","Message","Comment","Avatar","Author","Metadata","moment","fromNow","Text","Messages","privateChannel","messages","messagesLoading","privateMessagesRef","listeners","addMessageListener","loadedMessages","countUniqueUsers","uniqueUsers","plural","displayMessages","displayChannelName","marginLeft","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Register","username","email","password","passwordConfirmation","userRef","isFormEmpty","isPasswordValid","displayErrors","i","saveUser","createdUser","handleSubmit","createUserWithEmailAndPassword","updateProfile","md5","textAlign","verticalAlign","maxWidth","stacked","iconPosition","to","react","Login","signInWithEmailAndPassword","signedInUser","Spinner","Dimmer","Loader","intialUserState","isLoading","initialChannelState","rootReducers","combineReducers","action","store","createStore","composeWithDevTools","Root","onAuthStateChanged","setUser","history","clearUser","exact","path","component","App","RootWithAuth","withRouter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2580a6b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass ColorPanel extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>ColorPanel</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ColorPanel;","import React from 'react';\r\n\r\nclass MetaPanel extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>MetaPanel</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MetaPanel;","import firebase from \"firebase/app\"\r\nimport \"firebase/auth\"\r\nimport \"firebase/storage\"\r\nimport \"firebase/database\"\r\n\r\n\r\n\r\nvar Config = {\r\n    apiKey: \"AIzaSyAI9Ua1uVKjM-UPwg7i2VTGRpnaUEUzDyw\",\r\n    authDomain: \"react-slack-chat-app-95f1c.firebaseapp.com\",\r\n    databaseURL: \"https://react-slack-chat-app-95f1c.firebaseio.com\",\r\n    projectId: \"react-slack-chat-app-95f1c\",\r\n    storageBucket: \"react-slack-chat-app-95f1c.appspot.com\",\r\n    messagingSenderId: \"876248782759\",\r\n    appId: \"1:876248782759:web:e6fc7d2278091c9d438882\",\r\n    measurementId: \"G-V6E7344HBG\"\r\n};\r\n\r\nfirebase.initializeApp(Config);\r\n\r\nexport default firebase;","import React from 'react';\r\nimport { Grid, Header, Icon, Dropdown, Image, Modal, Input, Button } from 'semantic-ui-react';\r\nimport firebase from '../../firebase';\r\nimport AvatarEditor from 'react-avatar-editor';\r\n\r\nclass UserPanel extends React.Component {\r\n\r\n    state = {\r\n        user: this.props.currentUser,\r\n        modal: false,\r\n        previewImage: \"\",\r\n        croppedImage: '',\r\n        blob: ''\r\n    }\r\n\r\n    openModal = () => this.setState({ modal: true });\r\n\r\n    closeModal = () => this.setState({ modal: false });\r\n\r\n\r\n\r\n    dropDownOptions = () => [\r\n        {\r\n            key: \"user\",\r\n            text: (\r\n                <span>Signed in as <strong>{this.state.user.displayName}</strong></span>\r\n            ),\r\n            disabled: true\r\n        },\r\n        {\r\n            key: \"avatar\",\r\n            text: <span onClick={this.openModal} >Change avatar</span>\r\n        },\r\n        {\r\n            key: \"signout\",\r\n            text: <span onClick={this.handleSignout} >Sign out</span>\r\n        }\r\n    ];\r\n\r\n    handleSignout = () => {\r\n        firebase\r\n            .auth()\r\n            .signOut()\r\n            .then(() => console.log(\"SignedOut!\"))\r\n    }\r\n\r\n    handleChange = event => {\r\n        const file = event.target.files[0];\r\n        const reader = new FileReader();\r\n\r\n        if (file) {\r\n            reader.readAsDataURL(file);\r\n            reader.addEventListener(\"load\", () => {\r\n                this.setState({ previewImage: reader.result });\r\n            });\r\n        }\r\n    };\r\n\r\n    handleCropImage = () => {\r\n        if (this.avatarEditor) {\r\n            this.avatarEditor.getImageScaledToCanvas().toBlob(blob => {\r\n                let imageUrl = URL.createObjectURL(blob);\r\n                this.setState({\r\n                    croppedImage: imageUrl,\r\n                    blob\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { user, modal, previewImage, croppedImage } = this.state;\r\n        console.log(this.props.currentUser)\r\n        return (\r\n            <Grid style={{ background: '#43c4c' }} >\r\n                <Grid.Column>\r\n                    <Grid.Row style={{ padding: '1.2rem', margin: 0 }} >\r\n                        {/* App Header */}\r\n                        <Header inverted floated=\"left\" as=\"h2\" >\r\n                            <Icon name=\"user secret\" color=\"#4c3c4c\" size=\"big\" />\r\n                            <Header.Content>SHADOW chat</Header.Content>\r\n                        </Header>\r\n\r\n                        {/* User Dropdown */}\r\n                        <Header inverted style={{ padding: '0.2rem' }} as=\"h4\" >\r\n                            <Dropdown trigger={\r\n                                <span>\r\n                                    <Image src={user.photoURL} spaced=\"right\" avatar style={{ width: '50px', height: 'auto' }} />\r\n                                    {user.displayName}\r\n                                </span>}\r\n                                options={this.dropDownOptions()} />\r\n                        </Header>\r\n\r\n                    </Grid.Row>\r\n                    <Modal basic open={modal} onClose={this.closeModal} >\r\n                        <Modal.Header> Change Avatar </Modal.Header>\r\n                        <Modal.Content>\r\n                            <Input\r\n                                fluid\r\n                                type=\"file\"\r\n                                label=\"New Avatar\"\r\n                                name=\"previewImage\"\r\n                            />\r\n                            <Grid centered stackable columns={2} >\r\n                                <Grid.Row centered >\r\n                                    <Grid.Column className=\"ui centered aligned grid\" >\r\n                                        {previewImage && (\r\n                                            <AvatarEditor\r\n                                                ref={node => (this.avatarEditor = node)}\r\n                                                image={previewImage}\r\n                                                width={120}\r\n                                                height={120}\r\n                                                border={50}\r\n                                                scale={1.2}\r\n                                            />\r\n                                        )}\r\n                                        {/* Image Preview  */}\r\n                                    </Grid.Column>\r\n                                    <Grid.Column>\r\n                                        {croppedImage && (\r\n                                            <Image\r\n                                                style={{ margin: '3.5em auto' }}\r\n                                                width={100}\r\n                                                height={100}\r\n                                                src={croppedImage}\r\n                                            />\r\n                                        )}\r\n                                        {/* Cropped Image */}\r\n                                    </Grid.Column>\r\n                                </Grid.Row>\r\n                            </Grid>\r\n                        </Modal.Content>\r\n                        <Modal.Actions>\r\n                        {croppedImage &&<Button color=\"green\" inverted  >\r\n                                <Icon name=\"save\" /> Change Avatar\r\n                            </Button>}\r\n                            <Button color=\"green\" inverted onClick={this.handleCropImage} >\r\n                                <Icon name=\"image\" /> Preview\r\n                            </Button>\r\n                            <Button color=\"red\" inverted onClick={this.closeModal} >\r\n                                <Icon name=\"remove\" /> Cancel\r\n                            </Button>\r\n                        </Modal.Actions>\r\n                    </Modal>\r\n                </Grid.Column>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserPanel;","/* User Action Types */\r\nexport const SET_USER = \"SET_USER\";\r\nexport const CLEAR_USER = \"CLEAR_USER\"\r\n\r\n/* Channel Action Types */\r\nexport const SET_CURRENT_CHANNEL = \"SET_CURRENT_CHANNEL\";\r\nexport const SET_PRIVATE_CHANNEL = \"SET_PRIVATE_CHANNEL\";","/*User Actions*/\r\nimport * as actionTypes from './types';\r\n\r\nexport const setUser = user => {\r\n    return {\r\n        type: actionTypes.SET_USER,\r\n        payload: {\r\n            currentUser: user\r\n        }\r\n    };\r\n};\r\n\r\nexport const clearUser = () => {\r\n    return{\r\n        type: actionTypes.CLEAR_USER\r\n    }\r\n}\r\n\r\n/* Channel Actions */\r\nexport const setCurrentChannel = channel => {\r\n    return{\r\n        type: actionTypes.SET_CURRENT_CHANNEL,\r\n        payload: {\r\n            currentChannel: channel\r\n        }\r\n    }\r\n}\r\n\r\nexport const setPrivateChannel = isPrivateChannel => {\r\n    return {\r\n        type: actionTypes.SET_PRIVATE_CHANNEL,\r\n        payload: {\r\n            isPrivateChannel\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport firebase from '../../firebase'\r\nimport { connect } from 'react-redux'\r\nimport { setCurrentChannel, setPrivateChannel } from '../../actions'\r\nimport {Menu, Icon, Modal, Form, Input, Button, Label} from 'semantic-ui-react';\r\n\r\n\r\nclass Channels extends React.Component{\r\n    state={\r\n        channel: null,\r\n        messagesRef: firebase.database().ref('messages'),\r\n        activeChannel: '',\r\n        channels:[],\r\n        notifications: [],\r\n        channelName: '',\r\n        channelDetails: '',\r\n        channelsRef: firebase.database().ref('channels'),\r\n        user: this.props.currentUser,\r\n        firstLoad: true,\r\n        modal: false\r\n    };\r\n\r\n    componentDidMount(){\r\n        this.addListeners();\r\n    }\r\n\r\n    addListeners = () => {\r\n        let loadedChannels = [];\r\n        this.state.channelsRef.on('child_added', snap =>{\r\n            loadedChannels.push(snap.val());\r\n            console.log(loadedChannels);\r\n            this.setState({ channels: loadedChannels }, () => this.setFirstChannel());\r\n            this.addNotificationListener(snap.key);\r\n        })\r\n    };\r\n\r\n    addNotificationListener = channelId =>{\r\n        this.state.messagesRef.child(channelId).on('value', snap => {\r\n            if(this.state.channel){\r\n                this.handleNotifications(channelId, this.state.channel.id, this.state.notifications, snap)\r\n            }\r\n        })\r\n    }\r\n\r\n    handleNotifications = (channelId, currentChannelId, notifications, snap) => {\r\n        let lastTotal = 0;\r\n    \r\n        let index = notifications.findIndex(\r\n          notification => notification.id === channelId\r\n        );\r\n    \r\n        if (index !== -1) {\r\n          if (channelId !== currentChannelId) {\r\n            lastTotal = notifications[index].total;\r\n    \r\n            if (snap.numChildren() - lastTotal > 0) {\r\n              notifications[index].count = snap.numChildren() - lastTotal;\r\n            }\r\n          }\r\n          notifications[index].lastKnownTotal = snap.numChildren();\r\n        } else {\r\n          notifications.push({\r\n            id: channelId,\r\n            total: snap.numChildren(),\r\n            lastKnownTotal: snap.numChildren(),\r\n            count: 0\r\n          });\r\n        }\r\n    \r\n        this.setState({ notifications });\r\n      };\r\n    \r\n\r\n    setFirstChannel = () => {\r\n        const firstChannel = this.state.channels[0];\r\n        if(this.state.firstLoad && this.state.channels.length > 0){\r\n            this.props.setCurrentChannel(firstChannel);\r\n            this.setActiveChannel(firstChannel);\r\n            this.setState({ channel: firstChannel })\r\n        }\r\n        this.setState({ firstLoad:false });\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    }\r\n\r\n    addChannel = () => {\r\n        const {channelsRef, channelName, channelDetails, user} = this.state;\r\n        const key = channelsRef.push().key;\r\n        const newChannel = {\r\n            id: key,\r\n            name: channelName,\r\n            details: channelDetails,\r\n            createdBy: {\r\n                name: user.displayName,\r\n                avatar: user.photoURL\r\n            }\r\n        };\r\n        channelsRef\r\n           .child(key)\r\n           .update(newChannel)\r\n           .then(() =>{\r\n               this.setState({ channelName: '', channelDetails: '' });\r\n               this.closeModal();\r\n               console.log(\"channel Added\");\r\n            })\r\n           .catch(err => {\r\n               console.error(err);\r\n           })\r\n    }\r\n\r\n    handleSumbit = event => {\r\n        event.preventDefault();\r\n        if(this.isFormValid(this.state)){\r\n            this.addChannel();      \r\n        }\r\n    }\r\n\r\n    changeChannel = channel => {\r\n        this.setActiveChannel(channel);\r\n        this.clearNotifications();\r\n        this.props.setCurrentChannel(channel);\r\n        this.props.setPrivateChannel(false);\r\n        this.setState({ channel });\r\n    }\r\n\r\n    clearNotifications = () =>{\r\n        let index = this.state.notifications.findIndex(notification => notification.id === this.state.channel.id);\r\n\r\n        if(index !== -1){\r\n            let updatedNotifications = [...this.state.notifications];\r\n            updatedNotifications[index].total = this.state.notifications[index].lastKnownTotal;\r\n            updatedNotifications[index].count = 0;\r\n            this.setState({ notifications: updatedNotifications });\r\n        }\r\n    }\r\n\r\n    setActiveChannel = channel => {\r\n        this.setState({ activeChannel: channel.id });\r\n    }\r\n\r\n    getNotificationsCount = channel => {\r\n        let count = 0;\r\n\r\n        this.state.notifications.forEach(notification => {\r\n            if(notification.id === channel.id){\r\n                count = notification.count;\r\n            }\r\n        })\r\n        if(count > 0) return count;\r\n    }\r\n\r\n    displayChannels = channels => \r\n        channels.length > 0 && channels.map(channel => (\r\n            <Menu.Item\r\n             key={channel.id}\r\n             onClick={() => this.changeChannel(channel)}\r\n             name={channel.name}\r\n             style={{ opacity: 0.7 }}\r\n             active={channel.id === this.state.activeChannel}\r\n            >\r\n                {this.getNotificationsCount(channel) && (\r\n                    <Label color=\"red\">{this.getNotificationsCount(channel)}</Label>\r\n                )}\r\n               # {channel.name}\r\n            </Menu.Item>\r\n        ));\r\n\r\n    isFormValid = ({ channelName, channelDetails }) => channelName && channelDetails;\r\n\r\n    openModal = () => this.setState({modal: true})\r\n\r\n    closeModal = () => this.setState({modal: false});\r\n\r\n    render(){\r\n        const { channels, modal } = this.state;\r\n        return(\r\n            <React.Fragment>\r\n                <Menu.Menu className=\"menu\" >\r\n                    <Menu.Item>\r\n                        <span>\r\n                            <Icon name=\"users\" /> CHANNELS\r\n                        </span> {\"  \"}\r\n                        ({ channels.length }) <Icon name=\"add\" link onClick={this.openModal} />\r\n                    </Menu.Item>\r\n                    {this.displayChannels(channels)}\r\n                </Menu.Menu>\r\n                <Modal basic open={modal} onClose={this.closeModal}>\r\n                    <Modal.Header>Add a channel</Modal.Header>\r\n                    <Modal.Content>\r\n                        <Form onSubmit={this.handleSumbit}>\r\n                            <Form.Field>\r\n                                <Input \r\n                                  fluid\r\n                                  label=\"Name of Channel\"\r\n                                  name=\"channelName\"\r\n                                  onChange={this.handleChange}\r\n                                />\r\n                            </Form.Field>\r\n\r\n                            <Form.Field>\r\n                                <Input \r\n                                  fluid\r\n                                  label=\"About the Channel\"\r\n                                  name=\"channelDetails\"\r\n                                  onChange={this.handleChange}\r\n                                />\r\n                            </Form.Field>\r\n                        </Form>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button color=\"green\" inverted onClick={this.handleSumbit}> \r\n                            <Icon name=\"checkmark\" /> ADD\r\n                        </Button>\r\n                        <Button color=\"red\" inverted onClick={this.closeModal}>\r\n                            <Icon name=\"remove\" /> Cancel\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, {setCurrentChannel, setPrivateChannel})(Channels);","import React from \"react\";\r\nimport firebase from \"../../firebase\";\r\nimport { connect } from \"react-redux\";\r\nimport { setCurrentChannel, setPrivateChannel } from \"../../actions\";\r\nimport { Menu, Icon } from \"semantic-ui-react\";\r\n\r\nclass DirectMessages extends React.Component {\r\n  state = {\r\n    activeChannel: \"\",\r\n    user: this.props.currentUser,\r\n    users: [],\r\n    usersRef: firebase.database().ref(\"users\"),\r\n    connectedRef: firebase.database().ref(\".info/connected\"),\r\n    presenceRef: firebase.database().ref(\"presence\")\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.state.user) {\r\n      this.addListeners(this.state.user.uid);\r\n    }\r\n  }\r\n\r\n  addListeners = currentUserUid => {\r\n    let loadedUsers = [];\r\n    this.state.usersRef.on(\"child_added\", snap => {\r\n      if (currentUserUid !== snap.key) {\r\n        let user = snap.val();\r\n        user[\"uid\"] = snap.key;\r\n        user[\"status\"] = \"offline\";\r\n        loadedUsers.push(user);\r\n        this.setState({ users: loadedUsers });\r\n      }\r\n    });\r\n\r\n    this.state.connectedRef.on(\"value\", snap => {\r\n      if (snap.val() === true) {\r\n        const ref = this.state.presenceRef.child(currentUserUid);\r\n        ref.set(true);\r\n        ref.onDisconnect().remove(err => {\r\n          if (err !== null) {\r\n            console.error(err);\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    this.state.presenceRef.on(\"child_added\", snap => {\r\n      if (currentUserUid !== snap.key) {\r\n        this.addStatusToUser(snap.key);\r\n      }\r\n    });\r\n\r\n    this.state.presenceRef.on(\"child_removed\", snap => {\r\n      if (currentUserUid !== snap.key) {\r\n        this.addStatusToUser(snap.key, false);\r\n      }\r\n    });\r\n  };\r\n\r\n  addStatusToUser = (userId, connected = true) => {\r\n    const updatedUsers = this.state.users.reduce((acc, user) => {\r\n      if (user.uid === userId) {\r\n        user[\"status\"] = `${connected ? \"online\" : \"offline\"}`;\r\n      }\r\n      return acc.concat(user);\r\n    }, []);\r\n    this.setState({ users: updatedUsers });\r\n  };\r\n\r\n  isUserOnline = user => user.status === \"online\";\r\n\r\n  changeChannel = user => {\r\n    const channelId = this.getChannelId(user.uid);\r\n    const channelData = {\r\n      id: channelId,\r\n      name: user.name\r\n    };\r\n    this.props.setCurrentChannel(channelData);\r\n    this.props.setPrivateChannel(true);\r\n    this.setActiveChannel(user.uid);\r\n  };\r\n\r\n  getChannelId = userId => {\r\n    const currentUserId = this.state.user.uid;\r\n    return userId < currentUserId\r\n      ? `${userId}/${currentUserId}`\r\n      : `${currentUserId}/${userId}`;\r\n  };\r\n\r\n  setActiveChannel = userId => {\r\n    this.setState({ activeChannel: userId });\r\n  };\r\n\r\n  render() {\r\n    const { users, activeChannel } = this.state;\r\n\r\n    return (\r\n      <Menu.Menu className=\"menu\">\r\n        <Menu.Item>\r\n          <span>\r\n            <Icon name=\"mail\" /> DIRECT MESSAGES\r\n          </span>{\" \"}\r\n          ({users.length})\r\n        </Menu.Item>\r\n        {users.map(user => (\r\n          <Menu.Item\r\n            key={user.uid}\r\n            active={user.uid === activeChannel}\r\n            onClick={() => this.changeChannel(user)}\r\n            style={{ opacity: 0.7, fontStyle: \"italic\" }}\r\n          >\r\n            <Icon\r\n              name=\"circle\"\r\n              color={this.isUserOnline(user) ? \"green\" : \"red\"}\r\n            />\r\n            @ {user.name}\r\n          </Menu.Item>\r\n        ))}\r\n      </Menu.Menu>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { setCurrentChannel, setPrivateChannel }\r\n)(DirectMessages);\r\n","import React from 'react';\r\nimport UserPanel from './UserPanel';\r\nimport Channels from './Channels';\r\nimport DirectMessages from './DirectMessages';\r\nimport {Menu} from 'semantic-ui-react';\r\n\r\nclass SidePanel extends React.Component{\r\n    render(){\r\n        const { currentUser } = this.props;\r\n        return(\r\n            <Menu\r\n            size=\"large\"\r\n            inverted\r\n            vertical\r\n            fixed=\"left\"\r\n            style={{ background: '#43c4c', fontSize: '1.2rem' }}\r\n            >\r\n                <UserPanel currentUser = {currentUser} />\r\n                <Channels currentUser = {currentUser} />\r\n                <DirectMessages currentUser = {currentUser} />\r\n            </Menu>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SidePanel;","import React from 'react';\r\nimport { Segment, Icon, Header } from 'semantic-ui-react';\r\n\r\n\r\nclass MessagesHeader extends React.Component{\r\n    render(){\r\n        const { channelName, numUniqueUsers, isPrivateChannel } = this.props;\r\n        return(\r\n            <Segment clearing >\r\n                <Header as=\"h3\" floated=\"left\" fluid=\"true\" style={{marginBottom: 0}} >\r\n                    <span>\r\n                        {channelName}\r\n                        { !isPrivateChannel && <Icon color=\"black\" name={\"star outline\"} />}\r\n                    </span>\r\n                    <Header.Subheader>\r\n                    {numUniqueUsers}\r\n                    </Header.Subheader>\r\n                </Header>\r\n            </Segment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessagesHeader;","import React from 'react';\r\nimport firebase from '../../firebase';\r\nimport randomstring from 'randomstring';\r\n// import FileModal from './FileModal';\r\nimport { Segment, Button, Input} from 'semantic-ui-react';\r\nimport { Picker, emojiIndex } from 'emoji-mart'\r\nimport 'emoji-mart/css/emoji-mart.css';\r\n\r\n\r\nclass MessagesForm extends React.Component {\r\n    state = {\r\n      storageRef: firebase.storage().ref(),\r\n      uploadTask: null,\r\n      uploadState: '',\r\n      percentUploaded: 0,\r\n      message: \"\",\r\n      channel: this.props.currentChannel,\r\n      user: this.props.currentUser,\r\n      loading: false,\r\n      errors: [],\r\n      emojiPicker: false\r\n      // modal: false\r\n    };\r\n\r\n    handleAddEmoji = emoji =>{\r\n      const oldMessage = this.state.message;\r\n      const newMessage = this.colonToUnicode(` ${oldMessage} ${emoji.colons}`);\r\n      this.setState({ message: newMessage, emojiPicker: false });\r\n      setTimeout(() => this.messageInputRef.focus(), 0);\r\n    }\r\n\r\n    colonToUnicode = message => {\r\n      return message.replace(/:[A-Za-z0-9_+-]+:/g, x => {\r\n        x = x.replace(/:/g, \"\");\r\n        let emoji = emojiIndex.emojis[x];\r\n        if (typeof emoji !== \"undefined\") {\r\n          let unicode = emoji.native;\r\n          if (typeof unicode !== \"undefined\") {\r\n            return unicode;\r\n          }\r\n        }\r\n        x = \":\" + x + \":\";\r\n        return x;\r\n      });\r\n    };\r\n\r\n    handleTogglePicker = () => {\r\n      this.setState({ emojiPicker: !this.state.emojiPicker })\r\n    }\r\n\r\n\r\n    openModal = () => this.setState({ modal: true });\r\n\r\n    closeModal = () => this.setState({ modal: false });\r\n  \r\n    handleChange = event => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n  \r\n  createMessage = (fileUrl = null) => {\r\n    const message = {\r\n      timestamp: firebase.database.ServerValue.TIMESTAMP,\r\n      user: {\r\n        id: this.state.user.uid,\r\n        name: this.state.user.displayName,\r\n        avatar: this.state.user.photoURL\r\n      },\r\n    };\r\n    if(fileUrl !== null){\r\n      message['image'] = fileUrl;\r\n    }else {\r\n      message['content'] = this.state.message;\r\n    }\r\n    return message;\r\n  };\r\n\r\n  random = () =>{\r\n    randomstring.generate({length: 12,charset: 'alphabetic'});\r\n  } \r\n\r\n  uploadFile = (file, metadata) => {\r\n    // const pathToUpload = this.state.channel.id;\r\n    const ref = this.props.messagesRef;\r\n    const filePath = `chat/public/${file.name}`;\r\n\r\n    this.setState({\r\n      uploadState: 'uploading',\r\n      uploadTask: this.state.storageRef.child(filePath).put(file, metadata)\r\n    },\r\n      () =>{\r\n        // progesss function\r\n        this.state.uploadTask.on('state_changed', snap => {\r\n          const percentUploaded = Math.round((snap.bytesTransferred / snap.totalBytes) * 100)\r\n          this.setState({ percentUploaded })\r\n        },\r\n          err => {\r\n            //error function\r\n            console.error(err);\r\n            this.setState({\r\n              errors: this.state.errors.concat(err),\r\n              uploadState: 'error',\r\n              uploadTask: null\r\n            })\r\n          },\r\n          () => {\r\n            // on complete upload function, that is waht to do when it has upload to the database  \r\n            this.state.uploadTask.snapshot.ref.getDownloadURL().then(downloadUrl => {\r\n              console.log(downloadUrl);\r\n              this.sendFileMessage(downloadUrl, ref, filePath)\r\n            })\r\n            .catch(err => {\r\n              console.error(err);\r\n              this.setState({\r\n                errors: this.state.errors.concat(err),\r\n                uploadState: 'error',\r\n                uploadTask: null\r\n              })\r\n            })\r\n          }\r\n        )\r\n      }\r\n    )\r\n  }\r\n\r\n  sendFileMessage = (fileUrl, ref, pathToUpload) => {\r\n    ref\r\n      .child(pathToUpload)\r\n      .push()\r\n      .set(this.createMessage(fileUrl))\r\n      .then(() => {\r\n        this.setState({ uploadState: \"done\" });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          errors: this.state.errors.concat(err)\r\n        });\r\n      });\r\n  };\r\n  \r\n    sendMessage = () => {\r\n      const { getMessagesRef } = this.props;\r\n      const { message, channel } = this.state;\r\n  \r\n      if (message) {\r\n        this.setState({ loading: true });\r\n        getMessagesRef()\r\n          .child(channel.id)\r\n          .push()\r\n          .set(this.createMessage())\r\n          .then(() => {\r\n            this.setState({ loading: false, message: \"\", errors: [] });\r\n          })\r\n          .catch(err => {\r\n            console.error(err);\r\n            this.setState({\r\n              loading: false,\r\n              errors: this.state.errors.concat(err)\r\n            });\r\n          });\r\n      } else {\r\n        this.setState({\r\n          errors: this.state.errors.concat({ message: \"Add a message\" })\r\n        });\r\n      }\r\n    };\r\n  \r\n    render() {\r\n      const { errors,message, loading, emojiPicker} = this.state;\r\n  \r\n      return (\r\n        <Segment className=\"message__form\">\r\n          {emojiPicker && (\r\n            <Picker\r\n              set=\"apple\"\r\n              onSelect={this.handleAddEmoji}\r\n              className=\"emojipicker\"\r\n              title=\"pick your emoji\"\r\n              emoji=\"point_up\"\r\n            />\r\n          )}\r\n          <Input\r\n            fluid\r\n            name=\"message\"\r\n            onChange={this.handleChange}\r\n            value={message}\r\n            style={{ marginBottom: \"0.7em\" }}\r\n            label={<Button \r\n                    icon={emojiPicker ? \"close\" : \"smile outline\"}\r\n                    content={emojiPicker ? \"Close\" : null}\r\n                    onClick={this.handleTogglePicker} \r\n                  />}\r\n            ref={node => (this.messageInputRef = node)}\r\n            labelPosition=\"left\"\r\n            placeholder=\"Write your message\"\r\n            className={\r\n              errors.some(error => error.message.includes(\"message\"))\r\n                ? \"error\"\r\n                : \"\"\r\n            }\r\n          />\r\n          <Button.Group icon widths=\"2\">\r\n            <Button\r\n              onClick={this.sendMessage}\r\n              disabled={loading}\r\n              color=\"orange\"\r\n              content=\"Add Reply\"\r\n              labelPosition=\"left\"\r\n              icon=\"edit\"\r\n            />\r\n            {/* <Button\r\n              color=\"teal\"\r\n              content=\"Upload Media\"\r\n              labelPosition=\"right\"\r\n              icon=\"cloud upload\"\r\n              onClick={this.openModal}\r\n            />\r\n            <FileModal \r\n              modal={modal} \r\n              closeModal={this.closeModal} \r\n              uploadFile={this.uploadFile}\r\n            /> */}\r\n          </Button.Group>\r\n        </Segment>\r\n      );\r\n    }\r\n  }\r\nexport default MessagesForm;","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport { Comment, Image} from \"semantic-ui-react\";\r\n\r\nconst isOwnMessage = (message, user) => {\r\n  return message.user.id === user.uid ? \"message__self\" : \"\";\r\n};\r\n\r\nconst isImage = (message) => {\r\n  return message.hasOwnProperty('image') && !message.hasOwnProperty('content');\r\n}\r\n \r\nconst timeFromNow = timestamp => moment(timestamp).fromNow();\r\n\r\nconst Message = ({ message, user }) => (\r\n  <Comment>\r\n    <Comment.Avatar src={message.user.avatar} />\r\n    <Comment.Content className={isOwnMessage(message, user)}>\r\n      <Comment.Author as=\"a\">{message.user.name}</Comment.Author>\r\n      <Comment.Metadata>{timeFromNow(message.timestamp)}</Comment.Metadata>\r\n        {isImage(message) ? \r\n          <Image src={message.image} className=\"message__image\" />: \r\n          <Comment.Text>{message.content}</Comment.Text>   \r\n          }\r\n    </Comment.Content>\r\n  </Comment>\r\n);\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport { Segment, Comment } from \"semantic-ui-react\";\r\nimport firebase from \"../../firebase\";\r\n\r\nimport MessagesHeader from \"./MessagesHeader\";\r\nimport MessageForm from \"./MessagesForm\";\r\nimport Message from \"./Message\";\r\n\r\nclass Messages extends React.Component {\r\n  state = {\r\n    privateChannel: this.props.isPrivateChannel,\r\n    messagesRef: firebase.database().ref(\"messages\"),\r\n    messages: [],\r\n    messagesLoading: true,\r\n    channel: this.props.currentChannel,\r\n    user: this.props.currentUser,\r\n    numUniqueUsers: '',\r\n    privateMessagesRef: firebase.database().ref('privateMessages'),\r\n    listeners: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { channel, user } = this.state;\r\n\r\n    if (channel && user) {\r\n      this.addListeners(channel.id);\r\n    }\r\n  }\r\n  \r\n  \r\n  // componentWillUnmount(){\r\n  //   this.removeListeners(this.state.listeners)\r\n  // }\r\n\r\n  addListeners = channelId => {\r\n    this.addMessageListener(channelId);\r\n  };\r\n\r\n  addMessageListener = channelId => {\r\n    let loadedMessages = [];\r\n    const ref = this.getMessagesRef();\r\n    ref.child(channelId).on(\"child_added\", snap => {\r\n      loadedMessages.push(snap.val());\r\n      this.setState({\r\n        messages: loadedMessages,\r\n        messagesLoading: false\r\n      });\r\n      this.countUniqueUsers(loadedMessages);\r\n    });\r\n  };\r\n\r\n  countUniqueUsers = messages => {\r\n    const uniqueUsers = messages.reduce((acc, message) => {\r\n      if(!acc.includes(message.user.name)){\r\n        acc.push(message.user.name);\r\n      }\r\n      return acc;\r\n    }, [])\r\n    const plural = uniqueUsers.length > 1 || uniqueUsers.length === 0;\r\n    const numUniqueUsers = `${uniqueUsers.length} user${plural ? 's' : ''}`;\r\n    this.setState({ numUniqueUsers })\r\n  }\r\n\r\n  displayMessages = messages =>\r\n    messages.length > 0 &&\r\n    messages.map(message => (\r\n      <Message\r\n        key={message.timestamp}\r\n        message={message}\r\n        user={this.state.user}\r\n      />\r\n    ));\r\n\r\n    displayChannelName = channel => {\r\n      return channel ? `${this.state.privateChannel ? '@' : '#'}${channel.name}`: '';\r\n    };\r\n\r\n    getMessagesRef = () => {\r\n      const { messagesRef,privateMessagesRef, privateChannel } = this.state;\r\n      return privateChannel ? privateMessagesRef : messagesRef\r\n    }\r\n\r\n  render() {\r\n    const { messagesRef, messages, channel, user, numUniqueUsers,privateChannel } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <MessagesHeader\r\n          channelName={this.displayChannelName(channel)}\r\n          numUniqueUsers={numUniqueUsers}\r\n          isPrivateChannel={privateChannel}\r\n        />\r\n\r\n        <Segment>\r\n          <Comment.Group className=\"messages\">\r\n            {this.displayMessages(messages)}\r\n          </Comment.Group>\r\n        </Segment>\r\n\r\n        <MessageForm\r\n          messagesRef={messagesRef}\r\n          currentChannel={channel}\r\n          currentUser={user}\r\n          isPrivateChannel={privateChannel}\r\n          getMessagesRef={this.getMessagesRef}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Messages;\r\n","import React from 'react';\nimport {Grid} from 'semantic-ui-react'\nimport './App.css';\nimport {connect} from 'react-redux'\n\nimport ColorPanel from './ColorPanel/ColorPanel';\nimport MetaPanel from './MetaPanel/MetaPanel';\nimport SidePanel from './SidePanel/SidePanel';\nimport Messages from './Messages/Messages';\n\n\nconst App = ({ currentUser, currentChannel, isPrivateChannel }) => (\n    <Grid columns=\"equal\" className=\"app\" style={{ background: \"#eee\" }}>\n      <ColorPanel />\n      <SidePanel key={currentUser && currentUser.uid} currentUser={currentUser} />\n  \n      <Grid.Column style={{ marginLeft: 210 }}>\n        <Messages\n          key={currentChannel && currentChannel.id}\n          currentChannel={currentChannel}\n          currentUser={currentUser}\n          isPrivateChannel={isPrivateChannel}\n        />\n      </Grid.Column>\n  \n      <Grid.Column width={4}>\n        <MetaPanel />\n      </Grid.Column>\n    </Grid>\n  );\n  \n  const mapStateToProps = state => ({\n    currentUser: state.user.currentUser,\n    currentChannel: state.channel.currentChannel,\n    isPrivateChannel: state.channel.isPrivateChannel\n  });\n\nexport default connect(mapStateToProps)(App);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import react from 'react';\r\nimport {Grid, Header, Segment, Button, Message, Icon, Form,} from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport firebase from '../../firebase'\r\nimport md5 from 'md5'\r\n\r\n\r\nclass Register extends react.Component{\r\n\r\n    state = {\r\n        username: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        passwordConfirmation: \"\",\r\n        errors:[],\r\n        loading: false,\r\n        userRef: firebase.database().ref(\"users\")\r\n    };\r\n\r\n    isFormEmpty = ({ username, email, password, passwordConfirmation }) => {\r\n        return !username.length || !email.length || !password.length || !passwordConfirmation.length;\r\n    }\r\n\r\n    isPasswordValid =({ password, passwordConfirmation }) => {\r\n        if(password.length < 6 || passwordConfirmation.length < 6){\r\n            return false\r\n        }else if(password !== passwordConfirmation){\r\n            return false;\r\n        }else{\r\n            return true;\r\n        }\r\n    }\r\n\r\n    displayErrors = errors => errors.map((error, i) => <p key={i} >{error.Message}</p> );\r\n\r\n\r\n    isFormValid = () => {\r\n        let errors = [];\r\n        let error;\r\n        if(this.isFormEmpty(this.state)){\r\n            //throw err\r\n            error = {Message:'fill in all fields'};\r\n            this.setState({ errors: errors.concat(error) });\r\n            return false;\r\n        } else if(!this.isPasswordValid(this.state)){\r\n            //throw err\r\n            error = { Message:'password is not valid' };\r\n            this.setState({ errors: errors.concat(error) });\r\n            return false;\r\n        } else{\r\n            //form is valid \r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    handleChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    };\r\n\r\n    saveUser = createdUser => {\r\n        return this.state.userRef.child(createdUser.user.uid).set({\r\n            name: createdUser.user.displayName,\r\n            avatar: createdUser.user.photoURL\r\n        });\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        if(this.isFormValid()){\r\n        this.setState({ errors: [], loading: true })\r\n        firebase\r\n          .auth()\r\n          .createUserWithEmailAndPassword(this.state.email, this.state.password)\r\n          .then(createdUser => {\r\n              console.log(createdUser);\r\n              createdUser.user.updateProfile({\r\n                  displayName: this.state.username,\r\n                  photoURL: `https://robohash.org/${md5(createdUser.user.email)}?d=identicon`\r\n              })\r\n              .then(()=>{\r\n                this.saveUser(createdUser).then(() => {\r\n                    console.log(\"user saved\");\r\n                })\r\n              })\r\n              .catch(err =>{\r\n                console.error(err);\r\n                this.setState({errors: this.state.errors.concat(err), loading: false})\r\n              })\r\n          })\r\n          .catch(err => {\r\n              console.error(err);\r\n              this.setState({errors: this.state.errors.concat(err), loading: false})\r\n          })\r\n        }  \r\n    }\r\n\r\n    // handleInputError = (errors, inputName) => {    //     return errors.some(error => \r\n    //         error.message.toString().toLowerCase.includes(inputName)) \r\n    //         ?\"error\" \r\n    //         :\"\"\r\n    // }\r\n\r\n    render(){\r\n        const {username, \r\n               email, \r\n               password, \r\n               passwordConfirmation, \r\n               errors, \r\n               loading} = this.state;\r\n        return(\r\n            <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"App\">\r\n                <Grid.Column style={{maxWidth: 450}}>\r\n                    <Header as=\"h1\" icon color=\"black\" textAlign=\"center\">\r\n                        <Icon name=\"user secret\" color=\"black\" />\r\n                        Register for Shadow Chat\r\n                    </Header>\r\n                    <Form onSubmit={this.handleSubmit} size=\"large\">\r\n                        <Segment stacked >\r\n                            <Form.Input fluid \r\n                            name=\"username\" \r\n                            icon=\"user\" \r\n                            iconPosition=\"left\" \r\n                            placeholder=\"username\"\r\n                            value={username} \r\n                            onChange={this.handleChange} \r\n                            type=\"text\" />\r\n\r\n                            <Form.Input fluid \r\n                            name=\"email\" \r\n                            icon=\"mail\" \r\n                            iconPosition=\"left\" \r\n                            placeholder=\"Email\" \r\n                            value={email}\r\n                            // className ={ this.handleInputError(errors, \"email\") }\r\n                            onChange={this.handleChange} \r\n                            type=\"email\" />\r\n\r\n                            <Form.Input fluid \r\n                            name=\"password\" \r\n                            icon=\"lock\" \r\n                            iconPosition=\"left\" \r\n                            placeholder=\"Password\" \r\n                            value={password}\r\n                            // className ={ this.handleInputError(errors, \"password\") }\r\n                            onChange={this.handleChange} \r\n                            type=\"password\" />\r\n\r\n                            <Form.Input fluid \r\n                            name=\"passwordConfirmation\" \r\n                            icon=\"repeat\" \r\n                            iconPosition=\"left\" \r\n                            placeholder=\"Password Confirmation\" \r\n                            value={passwordConfirmation}\r\n                            // className ={ this.handleInputError(errors, \"password\") }\r\n                            onChange={this.handleChange} \r\n                            type=\"password\" />\r\n\r\n                            <Button disabled={loading} className={loading ? 'loading': ''} color=\"black\" fluid \r\n                            size=\"large\" >\r\n                            Submit\r\n                            </Button>\r\n                        </Segment>\r\n                    </Form>\r\n                    {errors.length > 0 && (\r\n                        <Message error>\r\n                            <h3>ERROR</h3>\r\n                            {this.displayErrors(errors)}\r\n                        </Message>\r\n                    )}\r\n                    <Message> Already a user? <Link to=\"/Login\" >Login</Link>  </Message>\r\n                </Grid.Column>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Register; ","import react from 'react';\r\nimport {Grid, Header, Segment, Button, Message, Icon, Form,} from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport firebase from '../../firebase'\r\n\r\n\r\nclass Login extends react.Component{\r\n\r\n    state = {\r\n        email: \"\",\r\n        password: \"\",\r\n        errors:[],\r\n        loading: false,\r\n    };\r\n\r\n    displayErrors = errors => errors.map((error, i) => <p key={i} >{error.Message}</p> );\r\n\r\n    handleChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    };\r\n\r\n    saveUser = createdUser => {\r\n        return this.state.userRef.child(createdUser.user.uid).set({\r\n            name: createdUser.user.displayName,\r\n            avatar: createdUser.user.photoURL\r\n        });\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        if(this.isFormValid(this.state)){\r\n        this.setState({ errors: [], loading: true })\r\n        firebase\r\n          .auth()\r\n          .signInWithEmailAndPassword(this.state.email, this.state.password)\r\n          .then(signedInUser => {\r\n              console.log(signedInUser);\r\n          })\r\n          .catch(err =>{\r\n            console.error(err);\r\n            this.setState({\r\n                errors: this.state.errors.concat(err),\r\n                loading: false\r\n            });\r\n          });\r\n        }  \r\n    }\r\n\r\n    isFormValid = ({email, password}) => email && password;\r\n\r\n    render(){\r\n        const {email, \r\n               password, \r\n               errors, \r\n               loading} = this.state;\r\n        return(\r\n            <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"App\">\r\n                <Grid.Column style={{maxWidth: 450}}>\r\n                    <Header as=\"h1\" icon color=\"black\" textAlign=\"center\">\r\n                        <Icon name=\"user secret\" color=\"black\" />\r\n                        Login to Shadow Chat\r\n                    </Header>\r\n                    <Form onSubmit={this.handleSubmit} size=\"large\">\r\n                        <Segment stacked >\r\n\r\n                            <Form.Input fluid \r\n                            name=\"email\" \r\n                            icon=\"mail\" \r\n                            iconPosition=\"left\" \r\n                            placeholder=\"Email\" \r\n                            value={email}\r\n                            onChange={this.handleChange} \r\n                            type=\"email\" />\r\n\r\n                            <Form.Input fluid \r\n                            name=\"password\" \r\n                            icon=\"lock\" \r\n                            iconPosition=\"left\" \r\n                            placeholder=\"Password\" \r\n                            value={password}\r\n                            onChange={this.handleChange} \r\n                            type=\"password\" />\r\n\r\n                            <Button disabled={loading} className={loading ? 'loading': ''} color=\"black\" fluid \r\n                            size=\"large\" >\r\n                            Login \r\n                            </Button>\r\n                        </Segment>\r\n                    </Form>\r\n                    {errors.length > 0 && (\r\n                        <Message error>\r\n                            <h3>ERROR</h3>\r\n                            {this.displayErrors(errors)}\r\n                        </Message>\r\n                    )}\r\n                    <Message> Don't have an account? <Link to=\"/Register\" >Register</Link>  </Message>\r\n                </Grid.Column>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Login; ","import React from 'react';\r\nimport {Loader, Dimmer} from 'semantic-ui-react';\r\n\r\nconst Spinner = () => (\r\n    <Dimmer active>\r\n        <Loader size={\"huge\"} content={\"Preparing chat...\"} />\r\n    </Dimmer>\r\n    \r\n)\r\n\r\nexport default Spinner;","import * as actionTypes from '../actions/types';\r\nimport {combineReducers} from 'redux'\r\n\r\n\r\nconst intialUserState = {\r\n    currentUser: null,\r\n    isLoading: true\r\n};\r\n\r\nconst user_reducer = (state = intialUserState, action) => {\r\n    switch (action.type){\r\n        case actionTypes.SET_USER:\r\n            return {\r\n                currentUser: action.payload.currentUser,\r\n                isLoading: false\r\n            };\r\n        case actionTypes.CLEAR_USER:\r\n            return{\r\n                ...state,\r\n                isLoading: false\r\n            }\r\n        default:\r\n             return state;\r\n    }\r\n};\r\n\r\nconst initialChannelState = {\r\n    currentChannel: null,\r\n    isPrivateChannel: false\r\n}\r\n\r\nconst channel_reducer = (state = initialChannelState, action) => {\r\n    switch(action.type){\r\n        case actionTypes.SET_CURRENT_CHANNEL:\r\n            return{\r\n                ...state,\r\n                currentChannel: action.payload.currentChannel\r\n            }\r\n        case actionTypes.SET_PRIVATE_CHANNEL:\r\n            return{\r\n                ...state,\r\n                isPrivateChannel: action.payload.isPrivateChannel\r\n            }    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst rootReducers = combineReducers ({\r\n    user: user_reducer,\r\n    channel: channel_reducer\r\n});\r\n\r\nexport default rootReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './component/App';\nimport reportWebVitals from './reportWebVitals';\nimport firebase from './firebase';\nimport {setUser, clearUser} from './actions';\n\nimport \"semantic-ui-css/semantic.min.css\";\n\n\nimport {BrowserRouter as Router, Switch, Route, withRouter} from 'react-router-dom';\n\nimport {createStore} from 'redux';\nimport { Provider, connect }  from 'react-redux'\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport Register from './component/Auth/Register';\nimport Login from './component/Auth/Login';\nimport Spinner from './Spinner';\nimport rootReducers from './reducers';\n\nconst store = createStore( rootReducers, composeWithDevTools());\n\nclass Root extends React.Component{\n\n  componentDidMount(){\n    console.log(this.props.isLoading);\n    firebase.auth().onAuthStateChanged(user => {\n      if(user){\n        this.props.setUser(user);\n        this.props.history.push('/');\n      } else{\n        this.props.history.push('/Login');\n        this.props.clearUser();\n      }\n    })\n  }\n\n  render(){\n    return this.props.isLoading ? <Spinner /> : (\n        <Switch>\n          <Route exact path=\"/\" component={App} />\n          <Route path=\"/Login\" component={Login} />\n          <Route path=\"/Register\" component={Register} />\n        </Switch>\n    );\n  }\n}\n\nconst mapStateFromProps = state => ({\n  isLoading: state.user.isLoading\n});\n\nconst RootWithAuth = withRouter(connect(mapStateFromProps, {setUser, clearUser} )(Root));\n\nReactDOM.render(\n  <React.StrictMode> \n    <Provider store={store}> \n    <Router> \n      <RootWithAuth /> \n    </Router> \n    </Provider>\n  </React.StrictMode>,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}